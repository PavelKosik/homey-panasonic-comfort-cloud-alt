{"version":3,"file":"oauth2-client.min.js","mappings":"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","sources":["webpack://OAuth2Client/webpack/universalModuleDefinition","webpack://OAuth2Client/./src/client.ts","webpack://OAuth2Client/./src/client/authorization-code.ts","webpack://OAuth2Client/./src/error.ts","webpack://OAuth2Client/./src/fetch-wrapper.ts","webpack://OAuth2Client/webpack/bootstrap","webpack://OAuth2Client/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"OAuth2Client\"] = factory();\n\telse\n\t\troot[\"OAuth2Client\"] = factory();\n})(self, () => {\nreturn ","import { OAuth2Token } from './token';\nimport {\n  AuthorizationCodeRequest,\n  ClientCredentialsRequest,\n  IntrospectionRequest,\n  IntrospectionResponse,\n  PasswordRequest,\n  OAuth2TokenTypeHint,\n  RefreshRequest,\n  RevocationRequest,\n  ServerMetadataResponse,\n  TokenResponse,\n} from './messages';\nimport { OAuth2HttpError } from './error';\nimport { OAuth2AuthorizationCodeClient } from './client/authorization-code';\n\n\ntype ClientCredentialsParams = {\n  scope?: string[];\n  extraParams?: Record<string, string>;\n\n  /**\n   * The resource  the client intends to access.\n   *\n   * @see https://datatracker.ietf.org/doc/html/rfc8707\n   */\n  resource?: string | string[];\n}\n\ntype PasswordParams = {\n  username: string;\n  password: string;\n\n  scope?: string[];\n\n  /**\n   * The resource  the client intends to access.\n   *\n   * @see https://datatracker.ietf.org/doc/html/rfc8707\n   */\n  resource?: string | string[];\n\n}\n\n/**\n * Extra options that may be passed to refresh()\n */\ntype RefreshParams = {\n  scope?: string[];\n\n  /**\n   * The resource  the client intends to access.\n   *\n   * @see https://datatracker.ietf.org/doc/html/rfc8707\n   */\n  resource?: string | string[];\n\n}\n\nexport interface ClientSettings {\n\n  /**\n   * The hostname of the OAuth2 server.\n   * If provided, we'll attempt to discover all the other related endpoints.\n   *\n   * If this is not desired, just specify the other endpoints manually.\n   *\n   * This url will also be used as the base URL for all other urls. This lets\n   * you specify all the other urls as relative.\n   */\n  server?: string;\n\n  /**\n   * OAuth2 clientId\n   */\n  clientId: string;\n\n  /**\n   * OAuth2 clientSecret\n   *\n   * This is required when using the 'client_secret_basic' authenticationMethod\n   * for the client_credentials and password flows, but not authorization_code\n   * or implicit.\n   */\n  clientSecret?: string;\n\n  /**\n   * The /authorize endpoint.\n   *\n   * Required only for the browser-portion of the authorization_code flow.\n   */\n  authorizationEndpoint?: string;\n\n  /**\n   * The token endpoint.\n   *\n   * Required for most grant types and refreshing tokens.\n   */\n  tokenEndpoint?: string;\n\n  /**\n   * Introspection endpoint.\n   *\n   * Required for, well, introspecting tokens.\n   * If not provided we'll try to discover it, or otherwise default to /introspect\n   */\n  introspectionEndpoint?: string;\n\n  /**\n   * Revocation endpoint.\n   *\n   * Required for revoking tokens. Not supported by all servers.\n   * If not provided we'll try to discover it, or otherwise default to /revoke\n   */\n  revocationEndpoint?: string;\n\n  /**\n   * OAuth 2.0 Authorization Server Metadata endpoint or OpenID\n   * Connect Discovery 1.0 endpoint.\n   *\n   * If this endpoint is provided it can be used to automatically figure\n   * out all the other endpoints.\n   *\n   * Usually the URL for this is: https://server/.well-known/oauth-authorization-server\n   */\n  discoveryEndpoint?: string;\n\n  /**\n   * Fetch implementation to use.\n   *\n   * Set this if you wish to explicitly set the fetch implementation, e.g. to\n   * implement middlewares or set custom headers.\n   */\n  fetch?: typeof fetch;\n\n  /**\n   * Client authentication method that is used to authenticate\n   * when using the token endpoint.\n   *\n   * Can be one of 'client_secret_basic' | 'client_secret_post'.\n   *\n   * The default value is 'client_secret_basic' if not provided.\n   */\n  authenticationMethod?: string;\n}\n\n\ntype OAuth2Endpoint = 'tokenEndpoint' | 'authorizationEndpoint' | 'discoveryEndpoint' | 'introspectionEndpoint' | 'revocationEndpoint';\n\nexport class OAuth2Client {\n\n  settings: ClientSettings;\n\n  constructor(clientSettings: ClientSettings) {\n\n    if (!clientSettings?.fetch) {\n      clientSettings.fetch = fetch.bind(globalThis);\n    }\n    this.settings = clientSettings;\n\n  }\n\n  /**\n   * Refreshes an existing token, and returns a new one.\n   */\n  async refreshToken(token: OAuth2Token, params?: RefreshParams): Promise<OAuth2Token> {\n\n    if (!token.refreshToken) {\n      throw new Error('This token didn\\'t have a refreshToken. It\\'s not possible to refresh this');\n    }\n\n    const body: RefreshRequest = {\n      grant_type: 'refresh_token',\n      refresh_token: token.refreshToken,\n    };\n    if (!this.settings.clientSecret) {\n      // If there's no secret, send the clientId in the body.\n      body.client_id = this.settings.clientId;\n    }\n\n    if (params?.scope) body.scope = params.scope.join(' ');\n    if (params?.resource) body.resource = params.resource;\n\n    const newToken = await this.tokenResponseToOAuth2Token(this.request('tokenEndpoint', body));\n    if (!newToken.refreshToken && token.refreshToken) {\n      // Reuse old refresh token if we didn't get a new one.\n      newToken.refreshToken = token.refreshToken;\n    }\n    return newToken;\n\n  }\n\n  /**\n   * Retrieves an OAuth2 token using the client_credentials grant.\n   */\n  async clientCredentials(params?: ClientCredentialsParams): Promise<OAuth2Token> {\n\n    const disallowed = ['client_id', 'client_secret', 'grant_type', 'scope'];\n\n    if (params?.extraParams && Object.keys(params.extraParams).filter((key) => disallowed.includes(key)).length > 0) {\n      throw new Error(`The following extraParams are disallowed: '${disallowed.join(\"', '\")}'`);\n    }\n\n    const body: ClientCredentialsRequest = {\n      grant_type: 'client_credentials',\n      scope: params?.scope?.join(' '),\n      resource: params?.resource,\n      ...params?.extraParams\n    };\n\n    if (!this.settings.clientSecret) {\n      throw new Error('A clientSecret must be provided to use client_credentials');\n    }\n\n    return this.tokenResponseToOAuth2Token(this.request('tokenEndpoint', body));\n\n  }\n\n  /**\n   * Retrieves an OAuth2 token using the 'password' grant'.\n   */\n  async password(params: PasswordParams): Promise<OAuth2Token> {\n\n    const body: PasswordRequest = {\n      grant_type: 'password',\n      ...params,\n      scope: params.scope?.join(' '),\n    };\n    return this.tokenResponseToOAuth2Token(this.request('tokenEndpoint', body));\n\n  }\n\n  /**\n   * Returns the helper object for the `authorization_code` grant.\n   */\n  get authorizationCode(): OAuth2AuthorizationCodeClient {\n\n    return new OAuth2AuthorizationCodeClient(\n      this,\n    );\n\n  }\n\n  /**\n   * Introspect a token\n   *\n   * This will give information about the validity, owner, which client\n   * created the token and more.\n   *\n   * @see https://datatracker.ietf.org/doc/html/rfc7662\n   */\n  async introspect(token: OAuth2Token): Promise<IntrospectionResponse> {\n\n    const body: IntrospectionRequest = {\n      token: token.accessToken,\n      token_type_hint: 'access_token',\n    };\n    return this.request('introspectionEndpoint', body);\n\n  }\n\n  /**\n   * Revoke a token\n   *\n   * This will revoke a token, provided that the server supports this feature.\n   *\n   * @see https://datatracker.ietf.org/doc/html/rfc7009\n   */\n  async revoke(token: OAuth2Token, tokenTypeHint: OAuth2TokenTypeHint = 'access_token'): Promise<void> {\n    let tokenValue = token.accessToken;\n    if (tokenTypeHint === 'refresh_token') {\n      tokenValue = token.refreshToken!;\n    }\n\n    const body: RevocationRequest = {\n      token: tokenValue,\n      token_type_hint: tokenTypeHint,\n    };\n    return this.request('revocationEndpoint', body);\n\n  }\n\n  /**\n   * Returns a url for an OAuth2 endpoint.\n   *\n   * Potentially fetches a discovery document to get it.\n   */\n  async getEndpoint(endpoint: OAuth2Endpoint): Promise<string> {\n\n    if (this.settings[endpoint] !== undefined) {\n      return resolve(this.settings[endpoint] as string, this.settings.server);\n    }\n\n    if (endpoint !== 'discoveryEndpoint') {\n      // This condition prevents infinite loops.\n      await this.discover();\n      if (this.settings[endpoint] !== undefined) {\n        return resolve(this.settings[endpoint] as string, this.settings.server);\n      }\n    }\n\n    // If we got here it means we need to 'guess' the endpoint.\n    if (!this.settings.server) {\n      throw new Error(`Could not determine the location of ${endpoint}. Either specify ${endpoint} in the settings, or the \"server\" endpoint to let the client discover it.`);\n    }\n\n    switch (endpoint) {\n      case 'authorizationEndpoint':\n        return resolve('/authorize', this.settings.server);\n      case 'tokenEndpoint':\n        return resolve('/token', this.settings.server);\n      case 'discoveryEndpoint':\n        return resolve('/.well-known/oauth-authorization-server', this.settings.server);\n      case 'introspectionEndpoint':\n        return resolve('/introspect', this.settings.server);\n      case 'revocationEndpoint':\n        return resolve('/revoke', this.settings.server);\n    }\n\n  }\n\n  private discoveryDone = false;\n  private serverMetadata: ServerMetadataResponse | null = null;\n\n\n  /**\n   * Fetches the OAuth2 discovery document\n   */\n  private async discover(): Promise<void> {\n\n    // Never discover twice\n    if (this.discoveryDone) return;\n    this.discoveryDone = true;\n\n    let discoverUrl;\n    try {\n      discoverUrl = await this.getEndpoint('discoveryEndpoint');\n    } catch (err) {\n      console.warn('[oauth2] OAuth2 discovery endpoint could not be determined. Either specify the \"server\" or \"discoveryEndpoint');\n      return;\n    }\n    const resp = await this.settings.fetch!(discoverUrl, { headers: { Accept: 'application/json' }});\n\n    if (!resp.ok) return;\n    if (!resp.headers.get('Content-Type')?.startsWith('application/json')) {\n      console.warn('[oauth2] OAuth2 discovery endpoint was not a JSON response. Response is ignored');\n      return;\n    }\n    this.serverMetadata = await resp.json();\n\n    const urlMap = [\n      ['authorization_endpoint', 'authorizationEndpoint'],\n      ['token_endpoint', 'tokenEndpoint'],\n      ['introspection_endpoint', 'introspectionEndpoint'],\n      ['revocation_endpoint', 'revocationEndpoint'],\n    ] as const;\n\n    if (this.serverMetadata === null) return;\n\n    for (const [property, setting] of urlMap) {\n      if (!this.serverMetadata[property]) continue;\n      this.settings[setting] = resolve(this.serverMetadata[property]!, discoverUrl);\n    }\n\n    if (this.serverMetadata.token_endpoint_auth_methods_supported && !this.settings.authenticationMethod) {\n      this.settings.authenticationMethod = this.serverMetadata.token_endpoint_auth_methods_supported[0];\n    }\n\n  }\n\n  /**\n   * Does a HTTP request on the 'token' endpoint.\n   */\n  async request(endpoint: 'tokenEndpoint', body: RefreshRequest | ClientCredentialsRequest | PasswordRequest | AuthorizationCodeRequest): Promise<TokenResponse>;\n  async request(endpoint: 'introspectionEndpoint', body: IntrospectionRequest): Promise<IntrospectionResponse>;\n  async request(endpoint: 'revocationEndpoint', body: RevocationRequest): Promise<void>;\n  async request(endpoint: OAuth2Endpoint, body: Record<string, any>): Promise<unknown> {\n\n    const uri = await this.getEndpoint(endpoint);\n\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      // Although it shouldn't be needed, Github OAUth2 will return JSON\n      // unless this is set.\n      'Accept': 'application/json',\n    };\n\n    let authMethod = this.settings.authenticationMethod;\n\n    if (!this.settings.clientSecret) {\n      // Basic auth should only be used when there's a client_secret, for\n      // non-confidential clients we may only have a client_id, which\n      // always gets added to the body.\n      authMethod = 'client_secret_post';\n    }\n    if (!authMethod) {\n      // If we got here, it means no preference was provided by anything,\n      // and we have a secret. In this case its preferred to embed\n      // authentication in the Authorization header.\n      authMethod = 'client_secret_basic';\n    }\n\n    switch(authMethod) {\n      case 'client_secret_basic' :\n        headers.Authorization = 'Basic ' +\n          btoa(this.settings.clientId + ':' + this.settings.clientSecret);\n        break;\n      case 'client_secret_post' :\n        body.client_id = this.settings.clientId;\n        if (this.settings.clientSecret) {\n          body.client_secret = this.settings.clientSecret;\n        }\n        break;\n      default:\n        throw new Error('Authentication method not yet supported:' + authMethod + '. Open a feature request if you want this!');\n    }\n\n    const resp = await this.settings.fetch!(uri, {\n      method: 'POST',\n      body: generateQueryString(body),\n      headers,\n    });\n\n    let responseBody;\n    if (resp.status !== 204 && resp.headers.has('Content-Type') && resp.headers.get('Content-Type')!.match(/^application\\/(.*\\+)?json/)) {\n      responseBody = await resp.json();\n    }\n    if (resp.ok) {\n      return responseBody;\n    }\n\n    let errorMessage;\n    let oauth2Code;\n\n    if (responseBody?.error) {\n      // This is likely an OAUth2-formatted error\n      errorMessage = 'OAuth2 error ' + responseBody.error + '.';\n      if (responseBody.error_description) {\n        errorMessage += ' ' + responseBody.error_description;\n      }\n      oauth2Code = responseBody.error;\n\n    } else {\n      errorMessage = 'HTTP Error ' + resp.status + ' ' + resp.statusText;\n      if (resp.status === 401 && this.settings.clientSecret) {\n        errorMessage += '. It\\'s likely that the clientId and/or clientSecret was incorrect';\n      }\n      oauth2Code = null;\n    }\n    throw new OAuth2HttpError(errorMessage, oauth2Code, resp, responseBody);\n  }\n\n  /**\n   * Converts the JSON response body from the token endpoint to an OAuth2Token type.\n   */\n  async tokenResponseToOAuth2Token(resp: Promise<TokenResponse>): Promise<OAuth2Token> {\n\n    const body = await resp;\n\n    if (!body?.access_token) {\n      console.warn('Invalid OAuth2 Token Response: ', body);\n      throw new TypeError('We received an invalid token response from an OAuth2 server.');\n    }\n\n    return {\n      accessToken: body.access_token,\n      expiresAt: body.expires_in ? Date.now() + (body.expires_in * 1000) : null,\n      refreshToken: body.refresh_token ?? null,\n    };\n\n  }\n\n}\n\nfunction resolve(uri: string, base?: string): string {\n\n  return new URL(uri, base).toString();\n\n}\n\n/**\n * Generates a query string.\n *\n * This function filters out any undefined values.\n */\nexport function generateQueryString(params: Record<string, undefined | number | string | string[]>): string {\n\n  const query = new URLSearchParams();\n  for (const [k, v] of Object.entries(params)) {\n    if (Array.isArray(v)) {\n      for(const vItem of v) query.append(k, vItem);\n    } else if (v !== undefined) query.set(k, v.toString());\n  }\n  return query.toString();\n\n}\n","import { OAuth2Client } from '../client';\nimport { OAuth2Token } from '../token';\nimport { AuthorizationCodeRequest } from '../messages';\nimport { OAuth2Error } from '../error';\n\ntype GetAuthorizeUrlParams = {\n  /**\n   * Where to redirect the user back to after authentication.\n   */\n  redirectUri: string;\n\n  /**\n   * The 'state' is a string that can be sent to the authentication server,\n   * and back to the redirectUri.\n   */\n  state?: string;\n\n  /**\n   * Code verifier for PKCE support. If you used this in the redirect\n   * to the authorization endpoint, you also need to use this again\n   * when getting the access_token on the token endpoint.\n   */\n  codeVerifier?: string;\n\n  /**\n   * List of scopes.\n   */\n  scope?: string[];\n\n  /**\n   * The resource the client intends to access.\n   *\n   * This is defined in RFC 8707.\n   */\n  resource?: string[] | string;\n\n  /**\n   * Any parameters listed here will be added to the query string for the authorization server endpoint.\n   */\n  extraParams?: Record<string, string>;\n\n  /**\n   * By default response parameters for the authorization_flow will be added\n   * to the query string.\n   *\n   * Some servers let you put this in the fragment instead. This may be\n   * benefical if your client is a browser, as embedding the authorization\n   * code in the fragment part of the URI prevents it from being sent back\n   * to the server.\n   *\n   * See: https://openid.net/specs/oauth-v2-multiple-response-types-1_0.html\n   */\n  responseMode?: 'query' | 'fragment';\n}\n\ntype ValidateResponseResult = {\n\n  /**\n   * The authorization code. This code should be used to obtain an access token.\n   */\n  code: string;\n\n  /**\n   * List of scopes that the client requested.\n   */\n  scope?: string[];\n\n}\n\ntype GetTokenParams = {\n\n  code: string;\n\n  redirectUri: string;\n  state?: string;\n  codeVerifier?:string;\n\n  /**\n   * The resource the client intends to access.\n   *\n   * @see https://datatracker.ietf.org/doc/html/rfc8707\n   */\n  resource?: string[] | string;\n\n}\n\nexport class OAuth2AuthorizationCodeClient {\n\n  client: OAuth2Client;\n\n  constructor(client: OAuth2Client) {\n\n    this.client = client;\n\n  }\n\n  /**\n   * Returns the URi that the user should open in a browser to initiate the\n   * authorization_code flow.\n   */\n  async getAuthorizeUri(params: GetAuthorizeUrlParams): Promise<string> {\n\n    const [\n      codeChallenge,\n      authorizationEndpoint\n    ] = await Promise.all([\n      params.codeVerifier ? getCodeChallenge(params.codeVerifier) : undefined,\n      this.client.getEndpoint('authorizationEndpoint')\n    ]);\n\n    const query = new URLSearchParams({\n      client_id: this.client.settings.clientId,\n      response_type: 'code',\n      redirect_uri: params.redirectUri,\n    });\n    if (codeChallenge) {\n      query.set('code_challenge_method', codeChallenge[0]);\n      query.set('code_challenge', codeChallenge[1]);\n    }\n    if (params.state) {\n      query.set('state', params.state);\n    }\n    if (params.scope) {\n      query.set('scope', params.scope.join(' '));\n    }\n\n    if (params.resource) for(const resource of [].concat(params.resource as any)) {\n      query.append('resource', resource);\n    }\n\n    if (params.responseMode && params.responseMode!=='query') {\n      query.append('response_mode', params.responseMode);\n    }\n\n    if (params.extraParams) for(const [k,v] of Object.entries(params.extraParams)) {\n      if (query.has(k)) throw new Error(`Property in extraParams would overwrite standard property: ${k}`);\n      query.set(k, v);\n    }\n\n    return authorizationEndpoint + '?' + query.toString();\n\n  }\n\n  async getTokenFromCodeRedirect(url: string|URL, params: Omit<GetTokenParams, 'code'> ): Promise<OAuth2Token> {\n\n    const { code } = this.validateResponse(url, {\n      state: params.state\n    });\n\n    return this.getToken({\n      code,\n      redirectUri: params.redirectUri,\n      codeVerifier: params.codeVerifier,\n    });\n\n  }\n\n  /**\n   * After the user redirected back from the authorization endpoint, the\n   * url will contain a 'code' and other information.\n   *\n   * This function takes the url and validate the response. If the user\n   * redirected back with an error, an error will be thrown.\n   */\n  validateResponse(url: string|URL, params: {state?: string}): ValidateResponseResult {\n\n    url = new URL(url);\n    let queryParams = url.searchParams;\n    if (!queryParams.has('code') && !queryParams.has('error') && url.hash.length>0) {\n      // Try the fragment\n      queryParams = new URLSearchParams(url.hash.slice(1));\n    }\n\n    if (queryParams.has('error')) {\n      throw new OAuth2Error(\n        queryParams.get('error_description') ?? 'OAuth2 error',\n        queryParams.get('error') as any,\n      );\n    }\n\n    if (!queryParams.has('code')) throw new Error(`The url did not contain a code parameter ${url}`);\n\n    if (params.state && params.state !== queryParams.get('state')) {\n      throw new Error(`The \"state\" parameter in the url did not match the expected value of ${params.state}`);\n    }\n\n    return {\n      code: queryParams.get('code')!,\n      scope: queryParams.has('scope') ? queryParams.get('scope')!.split(' ') : undefined,\n    };\n\n  }\n\n\n  /**\n   * Receives an OAuth2 token using 'authorization_code' grant\n   */\n  async getToken(params: GetTokenParams): Promise<OAuth2Token> {\n\n    const body:AuthorizationCodeRequest = {\n      grant_type: 'authorization_code',\n      code: params.code,\n      redirect_uri: params.redirectUri,\n      code_verifier: params.codeVerifier,\n      resource: params.resource,\n    };\n    return this.client.tokenResponseToOAuth2Token(this.client.request('tokenEndpoint', body));\n\n  }\n\n\n}\n\nexport async function generateCodeVerifier(): Promise<string> {\n\n  const webCrypto = getWebCrypto();\n  if (webCrypto) {\n    const arr = new Uint8Array(32);\n    webCrypto.getRandomValues(arr);\n    return base64Url(arr);\n  } else {\n\n    // Old node doesn't have 'webcrypto', so this is a fallback\n\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const nodeCrypto = require('crypto');\n    return new Promise<string>((res, rej) => {\n      nodeCrypto.randomBytes(32, (err:Error, buf: Buffer) => {\n        if (err) rej(err);\n        res(buf.toString('base64url'));\n      });\n    });\n\n  }\n\n}\n\nexport async function getCodeChallenge(codeVerifier: string): Promise<['plain' | 'S256', string]> {\n\n  const webCrypto = getWebCrypto();\n  if (webCrypto?.subtle) {\n    return ['S256', base64Url(await webCrypto.subtle.digest('SHA-256', stringToBuffer(codeVerifier)))];\n  } else {\n    // Node 14.x fallback\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const nodeCrypto = require('crypto');\n    const hash = nodeCrypto.createHash('sha256');\n    hash.update(stringToBuffer(codeVerifier));\n    return ['S256', hash.digest('base64url')];\n  }\n\n}\n\nfunction getWebCrypto() {\n\n  // Browsers\n  if ((typeof window !== 'undefined' && window.crypto)) {\n    return window.crypto;\n  }\n  // Web workers possibly\n  if ((typeof self !== 'undefined' && self.crypto)) {\n    return self.crypto;\n  }\n  // Node\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const crypto = require('crypto');\n  if (crypto.webcrypto) {\n    return crypto.webcrypto;\n  }\n  return null;\n\n}\n\nfunction stringToBuffer(input: string): ArrayBuffer {\n\n  const buf = new Uint8Array(input.length);\n  for(let i=0; i<input.length;i++) {\n    buf[i] = input.charCodeAt(i) & 0xFF;\n  }\n  return buf;\n\n}\n\nfunction base64Url(buf: ArrayBuffer) {\n  return (\n    btoa(String.fromCharCode(...new Uint8Array(buf)))\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_')\n      .replace(/=+$/, '')\n  );\n}\n\n","import { OAuth2ErrorCode } from './messages';\n\n/**\n * An error class for any error the server emits.\n *\n * The 'oauth2Code' property will have the oauth2 error type,\n * such as:\n * - invalid_request\n * - invalid_client\n * - invalid_grant\n * - unauthorized_client\n * - unsupported_grant_type\n * - invalid_scope\n */\nexport class OAuth2Error extends Error {\n\n  oauth2Code: OAuth2ErrorCode|string;\n\n  constructor(message: OAuth2ErrorCode|string, oauth2Code: OAuth2ErrorCode) {\n\n    super(message);\n    this.oauth2Code = oauth2Code;\n\n  }\n\n}\n\n/**\n * A OAuth2 error that was emitted as a HTTP error\n *\n * The 'code' property will have the oauth2 error type,\n * such as:\n * - invalid_request\n * - invalid_client\n * - invalid_grant\n * - unauthorized_client\n * - unsupported_grant_type\n * - invalid_scope\n *\n * This Error also gives you access to the HTTP status code and response body.\n */\nexport class OAuth2HttpError extends OAuth2Error {\n\n  httpCode: number;\n\n  response: Response;\n  parsedBody: Record<string, any>;\n\n  constructor(message: string, oauth2Code: OAuth2ErrorCode, response: Response, parsedBody: Record<string, any>) {\n\n    super(message, oauth2Code);\n\n    this.httpCode = response.status;\n    this.response = response;\n    this.parsedBody = parsedBody;\n\n  }\n\n}\n","import { OAuth2Token } from './token';\nimport { OAuth2Client } from './client';\n\ntype FetchMiddleware = (request: Request, next: (request: Request) => Promise<Response>) => Promise<Response>;\n\ntype OAuth2FetchOptions = {\n\n  /**\n   * Reference to OAuth2 client.\n   */\n  client: OAuth2Client;\n\n  /**\n   * You are responsible for implementing this function.\n   * it's purpose is to supply the 'initial' oauth2 token.\n   *\n   * This function may be async. Return `null` to fail the process.\n   */\n  getNewToken(): OAuth2Token | null | Promise<OAuth2Token | null>;\n\n  /**\n   * If set, will be called if authentication fatally failed.\n   */\n  onError?: (err: Error) => void;\n\n  /**\n   * This function is called whenever the active token changes. Using this is\n   * optional, but it may be used to (for example) put the token in off-line\n   * storage for later usage.\n   */\n  storeToken?: (token: OAuth2Token) => void;\n\n  /**\n   * Also an optional feature. Implement this if you want the wrapper to try a\n   * stored token before attempting a full re-authentication.\n   *\n   * This function may be async. Return null if there was no token.\n   */\n  getStoredToken?: () => OAuth2Token | null | Promise<OAuth2Token | null>;\n\n  /**\n   * Whether to automatically schedule token refresh.\n   *\n   * Certain execution environments, e.g. React Native, do not handle scheduled\n   * tasks with setTimeout() in a graceful or predictable fashion. The default\n   * behavior is to schedule refresh. Set this to false to disable scheduling.\n   */\n  scheduleRefresh?: boolean;\n\n}\n\nexport class OAuth2Fetch {\n\n  private options: OAuth2FetchOptions;\n\n  /**\n   * Current active token (if any)\n   */\n  private token: OAuth2Token | null = null;\n\n  /**\n   * If the user had a storedToken, the process to fetch it\n   * may be async. We keep track of this process in this\n   * promise, so it may be awaited to avoid race conditions.\n   *\n   * As soon as this promise resolves, this property gets nulled.\n   */\n  private activeGetStoredToken: null | Promise<void> = null;\n\n  constructor(options: OAuth2FetchOptions) {\n\n    if (options?.scheduleRefresh === undefined) {\n      options.scheduleRefresh = true;\n    }\n    this.options = options;\n    if (options.getStoredToken) {\n      this.activeGetStoredToken = (async () => {\n        this.token = await options.getStoredToken!();\n        this.activeGetStoredToken = null;\n      })();\n    }\n    this.scheduleRefresh();\n\n  }\n\n  /**\n   * Does a fetch request and adds a Bearer / access token.\n   *\n   * If the access token is not known, this function attempts to fetch it\n   * first. If the access token is almost expiring, this function might attempt\n   * to refresh it.\n   */\n  async fetch(input: RequestInfo, init?: RequestInit): Promise<Response> {\n\n    // input might be a string or a Request object, we want to make sure this\n    // is always a fully-formed Request object.\n    const request = new Request(input, init);\n\n    return this.mw()(\n      request,\n      req => fetch(req)\n    );\n\n  }\n\n  /**\n   * This function allows the fetch-mw to be called as more traditional\n   * middleware.\n   *\n   * This function returns a middleware function with the signature\n   *    (request, next): Response\n   */\n  mw(): FetchMiddleware {\n\n    return async (request, next) => {\n\n      const accessToken = await this.getAccessToken();\n\n      // Make a clone. We need to clone if we need to retry the request later.\n      let authenticatedRequest = request.clone();\n      authenticatedRequest.headers.set('Authorization', 'Bearer '  + accessToken);\n      let response = await next(authenticatedRequest);\n\n      if (!response.ok && response.status === 401) {\n\n        const newToken = await this.refreshToken();\n\n        authenticatedRequest = request.clone();\n        authenticatedRequest.headers.set('Authorization', 'Bearer '  + newToken.accessToken);\n        response = await next(authenticatedRequest);\n\n      }\n      return response;\n    };\n\n  }\n\n  /**\n   * Returns current token information.\n   *\n   * There result object will have:\n   *   * accessToken\n   *   * expiresAt - when the token expires, or null.\n   *   * refreshToken - may be null\n   *\n   * This function will attempt to automatically refresh if stale.\n   */\n  async getToken(): Promise<OAuth2Token> {\n\n    if (this.token && (this.token.expiresAt === null || this.token.expiresAt > Date.now())) {\n\n      // The current token is still valid\n      return this.token;\n\n    }\n\n    return this.refreshToken();\n\n  }\n\n  /**\n   * Returns an access token.\n   *\n   * If the current access token is not known, it will attempt to fetch it.\n   * If the access token is expiring, it will attempt to refresh it.\n   */\n  async getAccessToken(): Promise<string> {\n\n    // Ensure getStoredToken finished.\n    await this.activeGetStoredToken;\n\n    const token = await this.getToken();\n    return token.accessToken;\n\n  }\n\n  /**\n   * Keeping track of an active refreshToken operation.\n   *\n   * This will allow us to ensure only 1 such operation happens at any\n   * given time.\n   */\n  private activeRefresh: Promise<OAuth2Token> | null = null;\n\n  /**\n   * Forces an access token refresh\n   */\n  async refreshToken(): Promise<OAuth2Token> {\n\n    if (this.activeRefresh) {\n      // If we are currently already doing this operation,\n      // make sure we don't do it twice in parallel.\n      return this.activeRefresh;\n    }\n\n    const oldToken = this.token;\n    this.activeRefresh = (async() => {\n\n      let newToken: OAuth2Token|null = null;\n\n      try {\n        if (oldToken?.refreshToken) {\n          // We had a refresh token, lets see if we can use it!\n          newToken = await this.options.client.refreshToken(oldToken);\n        }\n      } catch (err) {\n        console.warn('[oauth2] refresh token not accepted, we\\'ll try reauthenticating');\n      }\n\n      if (!newToken) {\n        newToken = await this.options.getNewToken();\n      }\n\n      if (!newToken) {\n        const err = new Error('Unable to obtain OAuth2 tokens, a full reauth may be needed');\n        this.options.onError?.(err);\n        throw err;\n      }\n      return newToken;\n\n    })();\n\n    try {\n      const token = await this.activeRefresh;\n      this.token = token;\n      this.options.storeToken?.(token);\n      this.scheduleRefresh();\n      return token;\n    } catch (err: any) {\n      if (this.options.onError) {\n        this.options.onError(err);\n      }\n      throw err;\n    } finally {\n      // Make sure we clear the current refresh operation.\n      this.activeRefresh = null;\n    }\n\n  }\n\n  /**\n   * Timer trigger for the next automated refresh\n   */\n  private refreshTimer: ReturnType<typeof setTimeout> | null = null;\n\n  private scheduleRefresh() {\n    if (!this.options.scheduleRefresh) {\n      return;\n    }\n    if (this.refreshTimer) {\n      clearTimeout(this.refreshTimer);\n      this.refreshTimer = null;\n    }\n\n    if (!this.token?.expiresAt || !this.token.refreshToken) {\n      // If we don't know when the token expires, or don't have a refresh_token, don't bother.\n      return;\n    }\n\n    const expiresIn = this.token.expiresAt - Date.now();\n\n    // We only schedule this event if it happens more than 2 minutes in the future.\n    if (expiresIn < 120*1000) {\n      return;\n    }\n\n    // Schedule 1 minute before expiry\n    this.refreshTimer = setTimeout(async () => {\n      try {\n        await this.refreshToken();\n      } catch (err) {\n        // eslint-disable-next-line no-console\n        console.error('[fetch-mw-oauth2] error while doing a background OAuth2 auto-refresh', err);\n      }\n    }, expiresIn - 60*1000);\n\n  }\n\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","export { OAuth2Client } from './client';\nexport { OAuth2AuthorizationCodeClient, generateCodeVerifier } from './client/authorization-code';\nexport { OAuth2Fetch } from './fetch-wrapper';\nexport { OAuth2Token } from './token';\nexport { OAuth2Error, OAuth2HttpError } from './error';\n\nexport { IntrospectionResponse } from './messages';\n"],"names":["root","factory","exports","module","define","amd","self","resolve","uri","base","URL","toString","generateQueryString","params","query","URLSearchParams","k","v","Object","entries","Array","isArray","vItem","append","undefined","set","constructor","clientSettings","discoveryDone","serverMetadata","fetch","bind","globalThis","this","settings","refreshToken","token","Error","body","grant_type","refresh_token","clientSecret","client_id","clientId","scope","join","resource","newToken","tokenResponseToOAuth2Token","request","clientCredentials","disallowed","extraParams","keys","filter","key","includes","length","password","authorizationCode","OAuth2AuthorizationCodeClient","introspect","accessToken","token_type_hint","revoke","tokenTypeHint","tokenValue","getEndpoint","endpoint","server","discover","discoverUrl","err","console","warn","resp","headers","Accept","ok","get","startsWith","json","urlMap","property","setting","token_endpoint_auth_methods_supported","authenticationMethod","authMethod","Authorization","btoa","client_secret","method","responseBody","errorMessage","oauth2Code","status","has","match","error","error_description","statusText","OAuth2HttpError","access_token","TypeError","expiresAt","expires_in","Date","now","async","webCrypto","getWebCrypto","arr","Uint8Array","getRandomValues","base64Url","nodeCrypto","Promise","res","rej","randomBytes","buf","getCodeChallenge","codeVerifier","subtle","digest","stringToBuffer","hash","createHash","update","window","crypto","webcrypto","input","i","charCodeAt","String","fromCharCode","replace","client","getAuthorizeUri","codeChallenge","authorizationEndpoint","all","response_type","redirect_uri","redirectUri","state","concat","responseMode","getTokenFromCodeRedirect","url","code","validateResponse","getToken","queryParams","searchParams","slice","OAuth2Error","split","code_verifier","message","super","response","parsedBody","httpCode","options","activeGetStoredToken","activeRefresh","refreshTimer","scheduleRefresh","getStoredToken","init","Request","mw","req","next","getAccessToken","authenticatedRequest","clone","oldToken","getNewToken","onError","storeToken","clearTimeout","expiresIn","setTimeout","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","OAuth2Client","generateCodeVerifier","OAuth2Fetch"],"sourceRoot":""}