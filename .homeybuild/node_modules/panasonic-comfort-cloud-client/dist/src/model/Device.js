"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Device = void 0;
/* eslint-disable @typescript-eslint/adjacent-overload-signatures */
/* eslint-disable require-jsdoc */
const enums_js_1 = require("../domain/enums.js");
/*
{
                    "deviceGuid": "xxx",
                    "deviceType": "1",
                    "deviceName": "yyy",
                    "permission": 3,
                    "summerHouse": 0,
                    "iAutoX": false,
                    "nanoe": false,
                    "autoMode": true,
                    "heatMode": true,
                    "fanMode": false,
                    "dryMode": true,
                    "coolMode": true,
                    "ecoNavi": true,
                    "powerfulMode": true,
                    "quietMode": true,
                    "airSwingLR": true,
                    "ecoFunction": 0,
                    "temperatureUnit": 0,
                    "modeAvlList": {
                        "autoMode": 1,
                        "fanMode": 1
                    },
                    "parameters": {
                        "operate": 1,
                        "operationMode": 3,
                        "temperatureSet": 19.0,
                        "fanSpeed": 0,
                        "fanAutoMode": 1,
                        "airSwingLR": 0,
                        "airSwingUD": 0,
                        "ecoMode": 0,
                        "ecoNavi": 1,
                        "nanoe": 0,
                        "iAuto": 0,
                        "actualNanoe": 0,
                        "airDirection": 0,
                        "ecoFunctionData": 0
                    }
                }
*/
class Device {
    _guid;
    _name;
    _operate = enums_js_1.Power.Off;
    _operationMode = enums_js_1.OperationMode.Auto;
    _temperatureSet = 0;
    _fanSpeed = enums_js_1.FanSpeed.Auto;
    _fanAutoMode = enums_js_1.FanAutoMode.AirSwingAuto;
    _airSwingLR = enums_js_1.AirSwingLR.Mid;
    _airSwingUD = enums_js_1.AirSwingUD.Mid;
    _ecoMode = enums_js_1.EcoMode.Auto;
    _actualNanoe = enums_js_1.NanoeMode.Unavailable;
    _ecoNavi = 0;
    _nanoe = enums_js_1.NanoeMode.Unavailable;
    _iAuto = 0;
    _airDirection = 0;
    _ecoFunctionData = 0;
    _insideTemperature = 0;
    _outTemperature = 0;
    constructor(guid, name) {
        this._guid = guid;
        this._name = name;
    }
    get parameters() {
        return {
            operate: this._operate,
            operationMode: this._operationMode,
            ecoMode: this._ecoMode,
            temperatureSet: this._temperatureSet,
            airSwingUD: this._airSwingUD,
            airSwingLR: this._airSwingLR,
            fanAutoMode: this._fanAutoMode,
            fanSpeed: this._fanSpeed,
            actualNanoe: this._actualNanoe
        };
    }
    /**
     * Getter operate
     * @return {Power}
     */
    get operate() {
        return this._operate;
    }
    /**
     * Getter operationMode
     * @return {OperationMode}
     */
    get operationMode() {
        // eslint-disable-next-line semi
        return this._operationMode;
    }
    /**
     * Getter temperatureSet
     * @return {number}
     */
    get temperatureSet() {
        return this._temperatureSet;
    }
    /**
     * Getter fanSpeed
     * @return {FanSpeed}
     */
    get fanSpeed() {
        return this._fanSpeed;
    }
    /**
     * Getter fanAutoMode
     * @return {FanAutoMode}
     */
    get fanAutoMode() {
        return this._fanAutoMode;
    }
    /**
     * Getter airSwingLR
     * @return {AirSwingLR}
     */
    get airSwingLR() {
        return this._airSwingLR;
    }
    /**
     * Getter airSwingUD
     * @return {AirSwingUD}
     */
    get airSwingUD() {
        return this._airSwingUD;
    }
    /**
     * Getter ecoMode
     * @return {EcoMode}
     */
    get ecoMode() {
        return this._ecoMode;
    }
    /**
     * Getter ecoNavi
     * @return {number}
     */
    get ecoNavi() {
        return this._ecoNavi;
    }
    /**
     * Getter nanoe
     * @return {NanoeMode}
     */
    get nanoe() {
        return this._nanoe;
    }
    /**
     * Getter iAuto
     * @return {number}
     */
    get iAuto() {
        return this._iAuto;
    }
    /**
     * Getter actualNanoe
     * @return {NanoeMode}
     */
    get actualNanoe() {
        return this._actualNanoe;
    }
    /**
     * Getter airDirection
     * @return {number}
     */
    get airDirection() {
        return this._airDirection;
    }
    /**
     * Getter ecoFunctionData
     * @return {number}
     */
    get ecoFunctionData() {
        return this._ecoFunctionData;
    }
    /**
     * Setter operate
     * @param {Power} value
     */
    set operate(value) {
        this._operate = value;
    }
    /**
     * Setter operationMode
     * @param {OperationMode} value
     */
    set operationMode(value) {
        this._operationMode = value;
    }
    /**
     * Setter temperatureSet
     * @param {number} value
     */
    set temperatureSet(value) {
        this._temperatureSet = value;
    }
    /**
     * Setter fanSpeed
     * @param {FanSpeed} value
     */
    set fanSpeed(value) {
        this._fanSpeed = value;
    }
    /**
     * Setter fanAutoMode
     * @param {FanAutoMode} value
     */
    set fanAutoMode(value) {
        this._fanAutoMode = value;
    }
    /**
     * Setter airSwingLR
     * @param {AirSwingLR} value
     */
    set airSwingLR(value) {
        this._airSwingLR = value;
    }
    /**
     * Setter airSwingUD
     * @param {AirSwingUD} value
     */
    set airSwingUD(value) {
        this._airSwingUD = value;
    }
    /**
     * Setter ecoMode
     * @param {EcoMode} value
     */
    set ecoMode(value) {
        this._ecoMode = value;
    }
    /**
     * Setter ecoNavi
     * @param {number} value
     */
    set ecoNavi(value) {
        this._ecoNavi = value;
    }
    /**
     * Setter nanoe
     * @param {NanoeMode} value
     */
    set nanoe(value) {
        this._nanoe = value;
    }
    /**
     * Setter iAuto
     * @param {number} value
     */
    set iAuto(value) {
        this._iAuto = value;
    }
    /**
     * Setter actualNanoe
     * @param {NanoeMode} value
     */
    set actualNanoe(value) {
        this._actualNanoe = value;
    }
    /**
     * Setter airDirection
     * @param {number} value
     */
    set airDirection(value) {
        this._airDirection = value;
    }
    /**
     * Setter ecoFunctionData
     * @param {number} value
     */
    set ecoFunctionData(value) {
        this._ecoFunctionData = value;
    }
    /**
     * Getter name
     * @return {string}
     */
    get name() {
        return this._name;
    }
    /**
     * setter name
     * @param {string} value
     */
    set name(value) {
        this._name = value;
    }
    /**
     * Getter guid
     * @return {string}
     */
    get guid() {
        return this._guid;
    }
    /**
     * Setter guid
     * @param {string} value
     */
    set guid(value) {
        this._guid = value;
    }
    /**
     * Getter insideTemperature
     * @return {number}
     */
    get insideTemperature() {
        return this._insideTemperature;
    }
    /**
     * Setter insideTemperature
     * @param {number} value
     */
    set insideTemperature(value) {
        this._insideTemperature = value;
    }
    /**
     * Getter outTemperature
     * @return {number}
     */
    get outTemperature() {
        return this._outTemperature;
    }
    /**
     * Setter outTemperature
     * @param {number} value
     */
    set outTemperature(value) {
        this._outTemperature = value;
    }
}
exports.Device = Device;
