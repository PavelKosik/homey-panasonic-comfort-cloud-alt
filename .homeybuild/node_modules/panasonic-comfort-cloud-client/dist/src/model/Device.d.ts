import { Power, OperationMode, FanSpeed, AirSwingLR, AirSwingUD, EcoMode, FanAutoMode, NanoeMode } from '../domain/enums.js';
import { Parameters } from './Parameters.js';
export declare class Device {
    private _guid;
    private _name;
    private _operate;
    private _operationMode;
    private _temperatureSet;
    private _fanSpeed;
    private _fanAutoMode;
    private _airSwingLR;
    private _airSwingUD;
    private _ecoMode;
    private _actualNanoe;
    private _ecoNavi;
    private _nanoe;
    private _iAuto;
    private _airDirection;
    private _ecoFunctionData;
    private _insideTemperature;
    private _outTemperature;
    constructor(guid: string, name: string);
    get parameters(): Parameters;
    /**
     * Getter operate
     * @return {Power}
     */
    get operate(): Power;
    /**
     * Getter operationMode
     * @return {OperationMode}
     */
    get operationMode(): OperationMode;
    /**
     * Getter temperatureSet
     * @return {number}
     */
    get temperatureSet(): number;
    /**
     * Getter fanSpeed
     * @return {FanSpeed}
     */
    get fanSpeed(): FanSpeed;
    /**
     * Getter fanAutoMode
     * @return {FanAutoMode}
     */
    get fanAutoMode(): FanAutoMode;
    /**
     * Getter airSwingLR
     * @return {AirSwingLR}
     */
    get airSwingLR(): AirSwingLR;
    /**
     * Getter airSwingUD
     * @return {AirSwingUD}
     */
    get airSwingUD(): AirSwingUD;
    /**
     * Getter ecoMode
     * @return {EcoMode}
     */
    get ecoMode(): EcoMode;
    /**
     * Getter ecoNavi
     * @return {number}
     */
    get ecoNavi(): number;
    /**
     * Getter nanoe
     * @return {NanoeMode}
     */
    get nanoe(): NanoeMode;
    /**
     * Getter iAuto
     * @return {number}
     */
    get iAuto(): number;
    /**
     * Getter actualNanoe
     * @return {NanoeMode}
     */
    get actualNanoe(): NanoeMode;
    /**
     * Getter airDirection
     * @return {number}
     */
    get airDirection(): number;
    /**
     * Getter ecoFunctionData
     * @return {number}
     */
    get ecoFunctionData(): number;
    /**
     * Setter operate
     * @param {Power} value
     */
    set operate(value: Power);
    /**
     * Setter operationMode
     * @param {OperationMode} value
     */
    set operationMode(value: OperationMode);
    /**
     * Setter temperatureSet
     * @param {number} value
     */
    set temperatureSet(value: number);
    /**
     * Setter fanSpeed
     * @param {FanSpeed} value
     */
    set fanSpeed(value: FanSpeed);
    /**
     * Setter fanAutoMode
     * @param {FanAutoMode} value
     */
    set fanAutoMode(value: FanAutoMode);
    /**
     * Setter airSwingLR
     * @param {AirSwingLR} value
     */
    set airSwingLR(value: AirSwingLR);
    /**
     * Setter airSwingUD
     * @param {AirSwingUD} value
     */
    set airSwingUD(value: AirSwingUD);
    /**
     * Setter ecoMode
     * @param {EcoMode} value
     */
    set ecoMode(value: EcoMode);
    /**
     * Setter ecoNavi
     * @param {number} value
     */
    set ecoNavi(value: number);
    /**
     * Setter nanoe
     * @param {NanoeMode} value
     */
    set nanoe(value: NanoeMode);
    /**
     * Setter iAuto
     * @param {number} value
     */
    set iAuto(value: number);
    /**
     * Setter actualNanoe
     * @param {NanoeMode} value
     */
    set actualNanoe(value: NanoeMode);
    /**
     * Setter airDirection
     * @param {number} value
     */
    set airDirection(value: number);
    /**
     * Setter ecoFunctionData
     * @param {number} value
     */
    set ecoFunctionData(value: number);
    /**
     * Getter name
     * @return {string}
     */
    get name(): string;
    /**
     * setter name
     * @param {string} value
     */
    set name(value: string);
    /**
     * Getter guid
     * @return {string}
     */
    get guid(): string;
    /**
     * Setter guid
     * @param {string} value
     */
    set guid(value: string);
    /**
     * Getter insideTemperature
     * @return {number}
     */
    get insideTemperature(): number;
    /**
     * Setter insideTemperature
     * @param {number} value
     */
    set insideTemperature(value: number);
    /**
     * Getter outTemperature
     * @return {number}
     */
    get outTemperature(): number;
    /**
     * Setter outTemperature
     * @param {number} value
     */
    set outTemperature(value: number);
}
