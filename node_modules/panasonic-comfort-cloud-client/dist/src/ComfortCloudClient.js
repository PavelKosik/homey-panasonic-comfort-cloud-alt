"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComfortCloudClient = void 0;
const axios_1 = __importStar(require("axios"));
const lodash_1 = __importDefault(require("lodash"));
const ServiceError_js_1 = require("./model/ServiceError.js");
const Device_js_1 = require("./model/Device.js");
const Group_js_1 = require("./model/Group.js");
const TokenExpiredError_js_1 = require("./model/TokenExpiredError.js");
const AdapterCommunicationError_js_1 = require("./model/AdapterCommunicationError.js");
const helper_js_1 = require("./domain/helper.js");
const OAuthClient_js_1 = require("./OAuthClient.js");
const apiHelper_js_1 = require("./domain/apiHelper.js");
class ComfortCloudClient {
    baseUrl = 'https://accsmart.panasonic.com';
    urlPartLogin = '/auth/login/';
    urlPartGroup = '/device/group/';
    urlPartDevice = '/deviceStatus/';
    urlPartDeviceControl = '/deviceStatus/control';
    urlPartDeviceHistoryData = '/deviceHistoryData';
    defaultAppVersion = '1.22.0';
    axiosInstance;
    oauthClient;
    appVersion = '';
    clientId = '';
    constructor(appVersion) {
        this.appVersion = appVersion;
        if (!this.appVersion)
            this.appVersion = this.defaultAppVersion;
        this.axiosInstance = axios_1.default.create({
            baseURL: this.baseUrl,
        });
        this.oauthClient = new OAuthClient_js_1.OAuthClient(appVersion);
    }
    async login(username, password, refreshToken) {
        try {
            if (refreshToken) {
                const token = await this.oauthClient.refreshToken(refreshToken);
                if (token) {
                    const clientId = await this.getClientId(token);
                    this.clientId = clientId;
                    return '';
                }
            }
            const token = await this.oauthClient.oAuthProcess(username, password);
            const clientId = await this.getClientId(token);
            this.clientId = clientId;
        }
        catch (error) {
            this.handleError(error);
        }
        return '';
    }
    async getClientId(token) {
        const response = await this.axiosInstance.post('/auth/v2/login', {
            'language': 0,
        }, {
            headers: {
                ...(0, apiHelper_js_1.getBaseRequestHeaders)(this.appVersion, token),
                'X-User-Authorization-V2': 'Bearer ' + token,
            },
            validateStatus: status => (status >= 200 && status < 300) || status === 200,
        });
        const clientId = response.data.clientId;
        return clientId;
    }
    async getGroups() {
        try {
            const response = await this.axiosInstance.get(this.urlPartGroup, {
                headers: {
                    ...(0, apiHelper_js_1.getBaseRequestHeaders)(this.appVersion, this.oauthClient.token),
                    'X-Client-Id': this.clientId,
                    'X-User-Authorization-V2': 'Bearer ' + this.oauthClient.token,
                },
            });
            if (response.status == 200) {
                const groupsResponse = response.data.groupList;
                const groups = lodash_1.default.map(groupsResponse, (element) => {
                    const devices = lodash_1.default.map(element.deviceList, (device) => {
                        const retDevice = device.parameters;
                        retDevice.guid = device.deviceGuid;
                        retDevice.name = device.deviceName;
                        return retDevice;
                    });
                    return new Group_js_1.Group(element.groupId, element.groupName, devices);
                });
                return groups;
            }
        }
        catch (error) {
            this.handleError(error);
        }
        return [];
    }
    async getDevice(id, name) {
        try {
            const response = await this.axiosInstance.get(this.urlPartDevice + id, {
                headers: {
                    ...(0, apiHelper_js_1.getBaseRequestHeaders)(this.appVersion, this.oauthClient.token),
                    'X-Client-Id': this.clientId,
                    'X-User-Authorization-V2': 'Bearer ' + this.oauthClient.token,
                },
            });
            if (response.status == 200) {
                const responseData = response.data;
                const retDevice = new Device_js_1.Device('', '');
                lodash_1.default.assign(retDevice, responseData.parameters);
                retDevice.guid = id;
                retDevice.name = name ?? '';
                return retDevice;
            }
        }
        catch (error) {
            this.handleError(error);
        }
        return null;
    }
    handleError(error) {
        if (error instanceof axios_1.AxiosError) {
            let message;
            let code;
            if (error.response) {
                code = error.response?.data.code;
                message = error.response?.data.message;
                switch (code) {
                    case 4100:
                        throw new TokenExpiredError_js_1.TokenExpiredError(error.message + '\n' + message, code, error.status ?? -1);
                    case 5005:
                        throw new AdapterCommunicationError_js_1.AdapterCommunicationError(error.message + '\n' + message, code, error.status ?? -1);
                    default:
                        throw new ServiceError_js_1.ServiceError(error.message + '\n' + message, code, error.status ?? -1);
                        break;
                }
            }
        }
        throw error;
    }
    async setDevice(device) {
        return this.setParameters(device.guid, device.parameters);
    }
    async setParameters(guid, parameters) {
        const body = {
            deviceGuid: guid,
            parameters: parameters,
        };
        try {
            const response = await this.axiosInstance.post(this.urlPartDeviceControl, body, {
                headers: {
                    ...(0, apiHelper_js_1.getBaseRequestHeaders)(this.appVersion, this.oauthClient.token),
                    'X-Client-Id': this.clientId,
                    'X-User-Authorization-V2': 'Bearer ' + this.oauthClient.token,
                },
            });
            return response;
        }
        catch (error) {
            this.handleError(error);
        }
        return null;
    }
    async getDeviceHistoryData(deviceGuid, date, dataMode, timezone = '+00:00') {
        const dateString = (0, helper_js_1.getDateForHistoryData)(date);
        const body = {
            deviceGuid: deviceGuid,
            dataMode: dataMode,
            date: dateString,
            osTimezone: timezone
        };
        try {
            const response = await this.axiosInstance.post(this.urlPartDeviceHistoryData, body, {
                headers: {
                    ...(0, apiHelper_js_1.getBaseRequestHeaders)(this.appVersion, this.oauthClient.token),
                    'X-Client-Id': this.clientId,
                    'X-User-Authorization-V2': 'Bearer ' + this.oauthClient.token,
                },
            });
            return response.data;
        }
        catch (error) {
            this.handleError(error);
        }
        return null;
    }
}
exports.ComfortCloudClient = ComfortCloudClient;
