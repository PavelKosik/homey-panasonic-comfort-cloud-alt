#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ComfortCloudClient_js_1 = require("./ComfortCloudClient.js");
const Group_js_1 = require("./model/Group.js");
const prompts_1 = require("@inquirer/prompts");
const password_1 = __importDefault(require("@inquirer/password"));
const select_1 = __importDefault(require("@inquirer/select"));
const enums_js_1 = require("./domain/enums.js");
let client;
async function SelectCommand() {
    const nextCommand = await (0, select_1.default)({
        message: 'Select a package manager',
        choices: [
            {
                name: 'Get groups',
                value: 'get-group',
                description: 'Get all groups for this account',
            },
            {
                name: 'Get device',
                value: 'get-device',
                description: 'Get a device for a given guid',
            },
            {
                name: 'Print tokens',
                value: 'print-tokens',
                description: 'Print both OAuth token',
            },
            {
                name: 'Refresh token',
                value: 'refresh-token',
                description: 'Refresh the OAuth token',
            },
            {
                name: 'Exit',
                value: 'exit',
                description: 'Exit script',
            },
        ],
    });
    return nextCommand;
}
async function SelectDevice(selectedGroup) {
    console.log(`Found ${selectedGroup.devices.length} devices.`);
    const choicesDevices = new Array();
    for (let device of selectedGroup.devices) {
        choicesDevices.push({
            name: device.name,
            value: device,
        });
    }
    choicesDevices.push({
        name: 'Print group',
        value: selectedGroup,
    });
    const selectedObj = await (0, select_1.default)({
        message: 'Select a device or print group',
        choices: choicesDevices,
    });
    return selectedObj;
}
async function SelectGroup() {
    var groups = await client.getGroups();
    console.log(`Found ${groups.length} groups.`);
    const choicesGroups = new Array();
    for (let group of groups) {
        choicesGroups.push({
            name: group.name,
            value: group,
        });
    }
    const selectedGroup = await (0, select_1.default)({
        message: 'Select a group',
        choices: choicesGroups,
    });
    return selectedGroup;
}
async function GetDevice() {
    const deviceGuid = await (0, prompts_1.input)({
        message: 'Guid of the device',
    });
    const device = await client.getDevice(deviceGuid);
    console.log(device, null, 2);
}
async function SelectDeviceCommand(device) {
    const nextCommand = await (0, select_1.default)({
        message: `Select command for device ${device.name}.`,
        choices: [
            {
                name: 'Get history',
                value: 'get-history',
                description: 'Get history data for the device.',
            },
            {
                name: 'Print device',
                value: 'print-device',
                description: 'Prints all information of the device.',
            },
            {
                name: 'Exit',
                value: 'exit',
                description: 'Exit script',
            },
        ],
    });
    switch (nextCommand) {
        case 'get-history':
            const historyData = await client.getDeviceHistoryData(device.guid, new Date(), enums_js_1.DataMode.Day);
            console.log(JSON.stringify(historyData, null, 2));
            break;
        case 'print-device':
            console.log(JSON.stringify(device, null, 2));
            break;
        default:
            break;
    }
}
async function start() {
    const answers = {
        username: await (0, prompts_1.input)({ message: 'Username' }),
        password: await (0, password_1.default)({ message: 'Password' }),
    };
    client = new ComfortCloudClient_js_1.ComfortCloudClient();
    await client.login(answers.username, answers.password);
    console.log('Login successful.');
    let nextCommand = null;
    while (nextCommand != 'exit') {
        nextCommand = await SelectCommand();
        switch (nextCommand) {
            case 'get-device':
                await GetDevice();
                break;
            case 'get-group':
                const selectedGroup = await SelectGroup();
                const deviceOrGroup = await SelectDevice(selectedGroup);
                if (deviceOrGroup instanceof Group_js_1.Group)
                    console.log(JSON.stringify(deviceOrGroup, null, 2));
                else
                    await SelectDeviceCommand(deviceOrGroup);
                break;
            case 'print-tokens':
                console.log(`OAuth token: ${client.oauthClient.token}`);
                console.log(`OAuth refresh token: ${client.oauthClient.tokenRefresh}`);
                break;
            case 'refresh-token':
                await client.oauthClient.refreshToken();
                console.log('Token refresh was successful.');
                break;
            default:
                break;
        }
    }
}
start();
